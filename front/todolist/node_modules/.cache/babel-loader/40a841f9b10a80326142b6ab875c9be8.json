{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/yujin/TODO/front/todolist/src/App.js\";\nimport React from \"react\";\nimport TodoListTemplate from \"./components/js/TodoListTemplate\";\nimport TodoItemList from \"./components/js/TodoItemList\";\nimport Form from \"./components/js/Form\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n    this.state = {\n      //Form.js에서 Hook(usestate)사용으로 인해 제거.\n      // input: \"\",\n      todos: []\n    }; // this.handleChange = this.handleChange.bind(this);\n\n    this.handleCreate = this.handleCreate.bind(this); // this.handleKeyPress = this.handleKeyPress.bind(this);\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.hadleInitinfo = this.hadleInitinfo.bind(this);\n  }\n\n  componentDidMount() {\n    this.hadleInitinfo();\n  }\n\n  hadleInitinfo() {\n    fetch(\"/api/todos\").then(res => res.json()).then(todos => this.setState({\n      todos: todos\n    })).catch(err => console.log(err));\n  } //Form.js에서 hook 사용으로 인해 제거\n  // handleChange(event) {\n  //   this.setState({\n  //     input: event.target.value,\n  //   });\n  // }\n  //Form.js 에서 Hook 사용으로 인해 statedptj input을 제외하고\n  //parameter로 받는다.\n  //등록\n\n\n  handleCreate(inputValue) {\n    const {\n      todos\n    } = this.state;\n\n    if (inputValue === \"\") {\n      alert(\"오늘 할일을 입력해주세요.\");\n      return;\n    } //화면에서 먼저 변경사항을 보여주는 방법으로 이용\n\n\n    this.setState({\n      input: \"\",\n      todos: todos.concat({\n        //배열안에 데이터를 추가한다. 새배열을 만든다.\n        id: this.id++,\n        content: inputValue,\n        isComplete: false\n      })\n    }); //처리\n\n    const data = {\n      body: JSON.stringify({\n        contet: inputValue\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"post\"\n    };\n    fetch(\"/api/todos\", data).then(res => {\n      if (!res.ok) {\n        throw new Error(res.status);\n      } else {\n        return this.handleInitInfo();\n      }\n    }).catch(err => console.log(err));\n  } //Form.js에서 hook 사용으로 인해 제거\n  // handleKeyPress(event) {\n  //   if (event.key === \"Enter\") {\n  //     this.handleCreate();\n  //   }\n  // }\n  //수정\n\n\n  handleToggle(id) {\n    const {\n      todos\n    } = this.state;\n    const isComplete = todos.find(todo => todo.id === id).isComplete;\n\n    if (!window.confirm(isComplete ? \"미완료 처리 하시겠습니까?\" : \"완료 처리 하시겠습니까?\")) {\n      return;\n    } //인자로 받은 id를 몇번째 아이템인지 찾는다.\n\n\n    const index = todos.findIndex(todo => todo.id === id); //선택한 객체를 저장한다.\n\n    const selected = todos[index]; //배열을 복사한다.\n\n    const nextTodos = [...todos]; //기존의 값을 복사하고 isComplete 값을 덮어쓴다.\n\n    nextTodos[index] = { ...selected,\n      isComplete: !selected.isComplete\n    };\n    this.setState({\n      todos: nextTodos\n    });\n    const data = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"put\"\n    };\n    fetch(\"api/todos/\" + id, data).then(res => {\n      if (!res.ok) {\n        throw new Error(res.status);\n      } else {\n        return this.handleInitInfo();\n      }\n    }).catch(err => console.log(err));\n  }\n\n  handleRemove(id) {\n    const {\n      todos\n    } = this.state;\n    const removeContent = todos.find(todo => todo.id === id).content;\n\n    if (!window.confirm(\"\" + removeContent + \"을 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n    const data = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"delete\"\n    };\n    fetch(\"/api/todos/\" + id, data).then(res => {\n      if (!res.ok) {\n        throw new Error(res.status);\n      } else {\n        return this.handleInitInfo();\n      }\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(TodoListTemplate, {\n      form: /*#__PURE__*/_jsxDEV(Form //Hook사용으로 제거\n      // value={this.state.input}\n      // onChange={this.handleChange}\n      // onKeyPress={this.handleKeyPress}\n      , {\n        onCreate: this.handleCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(TodoItemList, {\n        todos: this.state.todos,\n        onToggle: this.handleToggle,\n        onRemove: this.handleRemove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/yujin/TODO/front/todolist/src/App.js"],"names":["React","TodoListTemplate","TodoItemList","Form","App","Component","constructor","props","id","state","todos","handleCreate","bind","handleToggle","handleRemove","hadleInitinfo","componentDidMount","fetch","then","res","json","setState","catch","err","console","log","inputValue","alert","input","concat","content","isComplete","data","body","JSON","stringify","contet","headers","method","ok","Error","status","handleInitInfo","find","todo","window","confirm","index","findIndex","selected","nextTodos","removeContent","filter","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TodoListTemplate from \"./components/js/TodoListTemplate\";\nimport TodoItemList from \"./components/js/TodoItemList\";\nimport Form from \"./components/js/Form\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n    this.state = {\n      //Form.js에서 Hook(usestate)사용으로 인해 제거.\n      // input: \"\",\n      todos: [],\n    };\n    // this.handleChange = this.handleChange.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n    // this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.hadleInitinfo = this.hadleInitinfo.bind(this);\n  }\n\n  componentDidMount() {\n    this.hadleInitinfo();\n  }\n\n  hadleInitinfo() {\n    fetch(\"/api/todos\")\n      .then((res) => res.json())\n      .then((todos) => this.setState({ todos: todos }))\n      .catch((err) => console.log(err));\n  }\n\n  //Form.js에서 hook 사용으로 인해 제거\n  // handleChange(event) {\n  //   this.setState({\n  //     input: event.target.value,\n  //   });\n  // }\n\n  //Form.js 에서 Hook 사용으로 인해 statedptj input을 제외하고\n  //parameter로 받는다.\n  //등록\n  handleCreate(inputValue) {\n    const { todos } = this.state;\n    if (inputValue === \"\") {\n      alert(\"오늘 할일을 입력해주세요.\");\n      return;\n    }\n    //화면에서 먼저 변경사항을 보여주는 방법으로 이용\n    this.setState({\n      input: \"\",\n      todos: todos.concat({\n        //배열안에 데이터를 추가한다. 새배열을 만든다.\n        id: this.id++,\n        content: inputValue,\n        isComplete: false,\n      }),\n    });\n\n    //처리\n    const data = {\n      body: JSON.stringify({ contet: inputValue }),\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"post\",\n    };\n    fetch(\"/api/todos\", data)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.status);\n        } else {\n          return this.handleInitInfo();\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  //Form.js에서 hook 사용으로 인해 제거\n  // handleKeyPress(event) {\n  //   if (event.key === \"Enter\") {\n  //     this.handleCreate();\n  //   }\n  // }\n\n  //수정\n  handleToggle(id) {\n    const { todos } = this.state;\n    const isComplete = todos.find((todo) => todo.id === id).isComplete;\n    if (\n      !window.confirm(\n        isComplete ? \"미완료 처리 하시겠습니까?\" : \"완료 처리 하시겠습니까?\"\n      )\n    ) {\n      return;\n    }\n    //인자로 받은 id를 몇번째 아이템인지 찾는다.\n    const index = todos.findIndex((todo) => todo.id === id);\n    //선택한 객체를 저장한다.\n    const selected = todos[index];\n    //배열을 복사한다.\n    const nextTodos = [...todos];\n\n    //기존의 값을 복사하고 isComplete 값을 덮어쓴다.\n    nextTodos[index] = {\n      ...selected,\n      isComplete: !selected.isComplete,\n    };\n\n    this.setState({\n      todos: nextTodos,\n    });\n    const data = {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"put\",\n    };\n    fetch(\"api/todos/\" + id, data)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.status);\n        } else {\n          return this.handleInitInfo();\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  handleRemove(id) {\n    const { todos } = this.state;\n    const removeContent = todos.find((todo) => todo.id === id).content;\n    if (!window.confirm(\"\" + removeContent + \"을 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    this.setState({\n      todos: todos.filter((todo) => todo.id !== id),\n    });\n\n    const data = {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"delete\",\n    };\n    fetch(\"/api/todos/\" + id, data)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.status);\n        } else {\n          return this.handleInitInfo();\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <TodoListTemplate\n        form={\n          <Form\n            //Hook사용으로 제거\n            // value={this.state.input}\n            // onChange={this.handleChange}\n            // onKeyPress={this.handleKeyPress}\n            onCreate={this.handleCreate}\n          />\n        }\n      >\n        <TodoItemList\n          todos={this.state.todos}\n          onToggle={this.handleToggle}\n          onRemove={this.handleRemove}\n        />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}