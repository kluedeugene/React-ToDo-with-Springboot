{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/yujin/TODO/front/todolist/src/App.js\";\nimport React from \"react\";\nimport TodoListTemplate from \"./components/js/TodoListTemplate\";\nimport TodoItemList from \"./components/js/TodoItemList\";\nimport Form from \"./components/js/Form\"; // class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.id = 0;\n//     this.state = {\n//       //Form.js에서 Hook(usestate)사용으로 인해 제거.\n//       // input: \"\",\n//       todos: [],\n//     };\n//     // this.handleChange = this.handleChange.bind(this);\n//     this.handleCreate = this.handleCreate.bind(this);\n//     // this.handleKeyPress = this.handleKeyPress.bind(this);\n//     this.handleToggle = this.handleToggle.bind(this);\n//     this.handleRemove = this.handleRemove.bind(this);\n//     this.handleInitInfo = this.handleInitInfo.bind(this);\n//   }\n//   componentDidMount() {\n//     this.handleInitInfo();\n//   }\n//   handleInitInfo() {\n//     fetch(\"/api/todos\")\n//       .then((res) => res.json())\n//       .then((todos) => this.setState({ todos: todos }))\n//       .catch((err) => console.log(err));\n//   }\n//   //Form.js에서 hook 사용으로 인해 제거\n//   // handleChange(event) {\n//   //   this.setState({\n//   //     input: event.target.value,\n//   //   });\n//   // }\n//   //Form.js 에서 Hook 사용으로 인해 statedptj input을 제외하고\n//   //parameter로 받는다.\n//   //등록\n//   handleCreate(inputValue) {\n//     const { todos } = this.state;\n//     if (inputValue === \"\") {\n//       alert(\"오늘 할일을 입력해주세요.\");\n//       return;\n//     }\n//     //화면에서 먼저 변경사항을 보여주는 방법으로 이용\n//     this.setState({\n//       input: \"\",\n//       todos: todos.concat({\n//         //배열안에 데이터를 추가한다. 새배열을 만든다.\n//         id: this.id++,\n//         content: inputValue,\n//         isComplete: false,\n//       }),\n//     });\n//     //처리\n//     const data = {\n//       body: JSON.stringify({ contet: inputValue }),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       method: \"post\",\n//     };\n//     fetch(\"/api/todos\", data)\n//       .then((res) => {\n//         if (!res.ok) {\n//           throw new Error(res.status);\n//         } else {\n//           return this.handleInitInfo();\n//         }\n//       })\n//       .catch((err) => console.log(err));\n//   }\n//   //Form.js에서 hook 사용으로 인해 제거\n//   // handleKeyPress(event) {\n//   //   if (event.key === \"Enter\") {\n//   //     this.handleCreate();\n//   //   }\n//   // }\n//   //수정\n//   handleToggle(id) {\n//     const { todos } = this.state;\n//     const isComplete = todos.find((todo) => todo.id === id).isComplete;\n//     if (\n//       !window.confirm(\n//         isComplete ? \"미완료 처리 하시겠습니까?\" : \"완료 처리 하시겠습니까?\"\n//       )\n//     ) {\n//       return;\n//     }\n//     //인자로 받은 id를 몇번째 아이템인지 찾는다.\n//     const index = todos.findIndex((todo) => todo.id === id);\n//     //선택한 객체를 저장한다.\n//     const selected = todos[index];\n//     //배열을 복사한다.\n//     const nextTodos = [...todos];\n//     //기존의 값을 복사하고 isComplete 값을 덮어쓴다.\n//     nextTodos[index] = {\n//       ...selected,\n//       isComplete: !selected.isComplete,\n//     };\n//     this.setState({\n//       todos: nextTodos,\n//     });\n//     const data = {\n//       headers: { \"Content-Type\": \"application/json\" },\n//       method: \"put\",\n//     };\n//     fetch(\"api/todos/\" + id, data)\n//       .then((res) => {\n//         if (!res.ok) {\n//           throw new Error(res.status);\n//         } else {\n//           return this.handleInitInfo();\n//         }\n//       })\n//       .catch((err) => console.log(err));\n//   }\n//   handleRemove(id) {\n//     const { todos } = this.state;\n//     const removeContent = todos.find((todo) => todo.id === id).content;\n//     if (!window.confirm(\"\" + removeContent + \"을 삭제하시겠습니까?\")) {\n//       return;\n//     }\n//     this.setState({\n//       todos: todos.filter((todo) => todo.id !== id),\n//     });\n//     const data = {\n//       headers: { \"Content-Type\": \"application/json\" },\n//       method: \"delete\",\n//     };\n//     fetch(\"/api/todos/\" + id, data)\n//       .then((res) => {\n//         if (!res.ok) {\n//           throw new Error(res.status);\n//         } else {\n//           return this.handleInitInfo();\n//         }\n//       })\n//       .catch((err) => console.log(err));\n//   }\n//   render() {\n//     return (\n//       <TodoListTemplate\n//         form={\n//           <Form\n//             //Hook사용으로 제거\n//             // value={this.state.input}\n//             // onChange={this.handleChange}\n//             // onKeyPress={this.handleKeyPress}\n//             onCreate={this.handleCreate}\n//           />\n//         }\n//       >\n//         <TodoItemList\n//           todos={this.state.todos}\n//           onToggle={this.handleToggle}\n//           onRemove={this.handleRemove}\n//         />\n//       </TodoListTemplate>\n//     );\n//   }\n// }\n// export default App;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n      // input : \"\",\n      todos: []\n    }; // this.handleChange = this.handleChange.bind(this);\n\n    this.handleCreate = this.handleCreate.bind(this); // this.handleKeyPress = this.handleKeyPress.bind(this);\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleInitInfo = this.handleInitInfo.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleInitInfo();\n  }\n\n  handleInitInfo() {\n    fetch(\"/api/todos\").then(res => res.json()).then(todos => this.setState({\n      todos: todos\n    })).catch(err => console.log(err));\n  } // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n  // input 값 변경\n  // handleChange(event) {\n  //     this.setState({\n  //         input: event.target.value\n  //     });\n  // }\n  // *** Form.js 에서 Hook(useState) 사용으로 인해 state 에서 input 을 제외하고\n  // parameter 로 받는다.\n  // 등록\n\n\n  handleCreate(inputValue) {\n    const {\n      todos\n    } = this.state;\n\n    if (inputValue === \"\") {\n      alert(\"오늘 할 일을 입력해주세요!\");\n      return;\n    } // 화면에서 먼저 변경사항을 보여주는 방법으로 이용\n\n\n    this.setState({\n      // input: \"\",\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: 0,\n        // 임의의 id를 부여하여 key error 를 방지\n        content: inputValue,\n        isComplete: false\n      })\n    }); // 처리\n\n    const data = {\n      body: JSON.stringify({\n        content: inputValue\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"post\"\n    };\n    fetch(\"/api/todos\", data).then(res => {\n      if (!res.ok) {\n        throw new Error(res.status);\n      } else {\n        return this.handleInitInfo();\n      }\n    }).catch(err => console.log(err));\n  } // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n  // Enter Key 이벤트\n  // handleKeyPress(event) {\n  //     if (event.key === \"Enter\") {\n  //         this.handleCreate();\n  //     }\n  // }\n  // 수정\n\n\n  handleToggle(id) {\n    const {\n      todos\n    } = this.state;\n    const isComplete = todos.find(todo => todo.id === id).isComplete;\n\n    if (!window.confirm(isComplete ? \"미완료 처리 하시겠습니까?\" : \"완료 처리 하시겠습니까?\")) {\n      return;\n    } // 파라미터로 받은 id 를 가지고 몇 번째 아이템인지 찾는다.\n\n\n    const index = todos.findIndex(todo => todo.id === id); // 선택한 객체를 저장한다.\n\n    const selected = todos[index]; // 배열을 복사한다.\n\n    const nextTodos = [...todos]; // 기존의 값을 복사하고 isComplete 값을 덮어쓴다.\n\n    nextTodos[index] = { ...selected,\n      isComplete: !selected.isComplete\n    };\n    this.setState({\n      todos: nextTodos\n    });\n    const data = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"put\"\n    };\n    fetch(\"/api/todos/\" + id, data).then(res => {\n      if (!res.ok) {\n        throw new Error(res.status);\n      } else {\n        return this.handleInitInfo();\n      }\n    }).catch(err => console.log(err));\n  } // 삭제\n\n\n  handleRemove(id) {\n    const {\n      todos\n    } = this.state;\n    const removeContent = todos.find(todo => todo.id === id).content;\n\n    if (!window.confirm(\"'\" + removeContent + \"' 을 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n    const data = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"delete\"\n    };\n    fetch(\"/api/todos/\" + id, data).then(res => {\n      if (!res.ok) {\n        throw new Error(res.status);\n      } else {\n        return this.handleInitInfo();\n      }\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(TodoListTemplate, {\n      form: /*#__PURE__*/_jsxDEV(Form // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n      // value={this.state.input}\n      // onChange={this.handleChange}\n      // onCreate={this.handleCreate}\n      // onKeyPress={this.handleKeyPress}\n      , {\n        onCreate: this.handleCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(TodoItemList, {\n        todos: this.state.todos,\n        onToggle: this.handleToggle,\n        onRemove: this.handleRemove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/yujin/TODO/front/todolist/src/App.js"],"names":["React","TodoListTemplate","TodoItemList","Form","App","Component","constructor","props","state","todos","handleCreate","bind","handleToggle","handleRemove","handleInitInfo","componentDidMount","fetch","then","res","json","setState","catch","err","console","log","inputValue","alert","concat","id","content","isComplete","data","body","JSON","stringify","headers","method","ok","Error","status","find","todo","window","confirm","index","findIndex","selected","nextTodos","removeContent","filter","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TodoListTemplate from \"./components/js/TodoListTemplate\";\nimport TodoItemList from \"./components/js/TodoItemList\";\nimport Form from \"./components/js/Form\";\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.id = 0;\n//     this.state = {\n//       //Form.js에서 Hook(usestate)사용으로 인해 제거.\n//       // input: \"\",\n//       todos: [],\n//     };\n//     // this.handleChange = this.handleChange.bind(this);\n//     this.handleCreate = this.handleCreate.bind(this);\n//     // this.handleKeyPress = this.handleKeyPress.bind(this);\n//     this.handleToggle = this.handleToggle.bind(this);\n//     this.handleRemove = this.handleRemove.bind(this);\n//     this.handleInitInfo = this.handleInitInfo.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.handleInitInfo();\n//   }\n\n//   handleInitInfo() {\n//     fetch(\"/api/todos\")\n//       .then((res) => res.json())\n//       .then((todos) => this.setState({ todos: todos }))\n//       .catch((err) => console.log(err));\n//   }\n\n//   //Form.js에서 hook 사용으로 인해 제거\n//   // handleChange(event) {\n//   //   this.setState({\n//   //     input: event.target.value,\n//   //   });\n//   // }\n\n//   //Form.js 에서 Hook 사용으로 인해 statedptj input을 제외하고\n//   //parameter로 받는다.\n//   //등록\n//   handleCreate(inputValue) {\n//     const { todos } = this.state;\n//     if (inputValue === \"\") {\n//       alert(\"오늘 할일을 입력해주세요.\");\n//       return;\n//     }\n//     //화면에서 먼저 변경사항을 보여주는 방법으로 이용\n//     this.setState({\n//       input: \"\",\n//       todos: todos.concat({\n//         //배열안에 데이터를 추가한다. 새배열을 만든다.\n//         id: this.id++,\n//         content: inputValue,\n//         isComplete: false,\n//       }),\n//     });\n\n//     //처리\n//     const data = {\n//       body: JSON.stringify({ contet: inputValue }),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       method: \"post\",\n//     };\n//     fetch(\"/api/todos\", data)\n//       .then((res) => {\n//         if (!res.ok) {\n//           throw new Error(res.status);\n//         } else {\n//           return this.handleInitInfo();\n//         }\n//       })\n//       .catch((err) => console.log(err));\n//   }\n\n//   //Form.js에서 hook 사용으로 인해 제거\n//   // handleKeyPress(event) {\n//   //   if (event.key === \"Enter\") {\n//   //     this.handleCreate();\n//   //   }\n//   // }\n\n//   //수정\n//   handleToggle(id) {\n//     const { todos } = this.state;\n//     const isComplete = todos.find((todo) => todo.id === id).isComplete;\n//     if (\n//       !window.confirm(\n//         isComplete ? \"미완료 처리 하시겠습니까?\" : \"완료 처리 하시겠습니까?\"\n//       )\n//     ) {\n//       return;\n//     }\n//     //인자로 받은 id를 몇번째 아이템인지 찾는다.\n//     const index = todos.findIndex((todo) => todo.id === id);\n//     //선택한 객체를 저장한다.\n//     const selected = todos[index];\n//     //배열을 복사한다.\n//     const nextTodos = [...todos];\n\n//     //기존의 값을 복사하고 isComplete 값을 덮어쓴다.\n//     nextTodos[index] = {\n//       ...selected,\n//       isComplete: !selected.isComplete,\n//     };\n\n//     this.setState({\n//       todos: nextTodos,\n//     });\n//     const data = {\n//       headers: { \"Content-Type\": \"application/json\" },\n//       method: \"put\",\n//     };\n//     fetch(\"api/todos/\" + id, data)\n//       .then((res) => {\n//         if (!res.ok) {\n//           throw new Error(res.status);\n//         } else {\n//           return this.handleInitInfo();\n//         }\n//       })\n//       .catch((err) => console.log(err));\n//   }\n\n//   handleRemove(id) {\n//     const { todos } = this.state;\n//     const removeContent = todos.find((todo) => todo.id === id).content;\n//     if (!window.confirm(\"\" + removeContent + \"을 삭제하시겠습니까?\")) {\n//       return;\n//     }\n\n//     this.setState({\n//       todos: todos.filter((todo) => todo.id !== id),\n//     });\n\n//     const data = {\n//       headers: { \"Content-Type\": \"application/json\" },\n//       method: \"delete\",\n//     };\n//     fetch(\"/api/todos/\" + id, data)\n//       .then((res) => {\n//         if (!res.ok) {\n//           throw new Error(res.status);\n//         } else {\n//           return this.handleInitInfo();\n//         }\n//       })\n//       .catch((err) => console.log(err));\n//   }\n\n//   render() {\n//     return (\n//       <TodoListTemplate\n//         form={\n//           <Form\n//             //Hook사용으로 제거\n//             // value={this.state.input}\n//             // onChange={this.handleChange}\n//             // onKeyPress={this.handleKeyPress}\n//             onCreate={this.handleCreate}\n//           />\n//         }\n//       >\n//         <TodoItemList\n//           todos={this.state.todos}\n//           onToggle={this.handleToggle}\n//           onRemove={this.handleRemove}\n//         />\n//       </TodoListTemplate>\n//     );\n//   }\n// }\n\n// export default App;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n      // input : \"\",\n      todos: [],\n    };\n    // this.handleChange = this.handleChange.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n    // this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleInitInfo = this.handleInitInfo.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleInitInfo();\n  }\n\n  handleInitInfo() {\n    fetch(\"/api/todos\")\n      .then((res) => res.json())\n      .then((todos) => this.setState({ todos: todos }))\n      .catch((err) => console.log(err));\n  }\n\n  // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n  // input 값 변경\n  // handleChange(event) {\n  //     this.setState({\n  //         input: event.target.value\n  //     });\n  // }\n\n  // *** Form.js 에서 Hook(useState) 사용으로 인해 state 에서 input 을 제외하고\n  // parameter 로 받는다.\n  // 등록\n  handleCreate(inputValue) {\n    const { todos } = this.state;\n    if (inputValue === \"\") {\n      alert(\"오늘 할 일을 입력해주세요!\");\n      return;\n    }\n\n    // 화면에서 먼저 변경사항을 보여주는 방법으로 이용\n    this.setState({\n      // input: \"\",\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: 0, // 임의의 id를 부여하여 key error 를 방지\n        content: inputValue,\n        isComplete: false,\n      }),\n    });\n\n    // 처리\n    const data = {\n      body: JSON.stringify({ content: inputValue }),\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"post\",\n    };\n    fetch(\"/api/todos\", data)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.status);\n        } else {\n          return this.handleInitInfo();\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n  // Enter Key 이벤트\n  // handleKeyPress(event) {\n  //     if (event.key === \"Enter\") {\n  //         this.handleCreate();\n  //     }\n  // }\n\n  // 수정\n  handleToggle(id) {\n    const { todos } = this.state;\n\n    const isComplete = todos.find((todo) => todo.id === id).isComplete;\n    if (\n      !window.confirm(\n        isComplete ? \"미완료 처리 하시겠습니까?\" : \"완료 처리 하시겠습니까?\"\n      )\n    ) {\n      return;\n    }\n\n    // 파라미터로 받은 id 를 가지고 몇 번째 아이템인지 찾는다.\n    const index = todos.findIndex((todo) => todo.id === id);\n\n    // 선택한 객체를 저장한다.\n    const selected = todos[index];\n\n    // 배열을 복사한다.\n    const nextTodos = [...todos];\n\n    // 기존의 값을 복사하고 isComplete 값을 덮어쓴다.\n    nextTodos[index] = {\n      ...selected,\n      isComplete: !selected.isComplete,\n    };\n\n    this.setState({\n      todos: nextTodos,\n    });\n\n    const data = {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"put\",\n    };\n    fetch(\"/api/todos/\" + id, data)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.status);\n        } else {\n          return this.handleInitInfo();\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  // 삭제\n  handleRemove(id) {\n    const { todos } = this.state;\n\n    const removeContent = todos.find((todo) => todo.id === id).content;\n    if (!window.confirm(\"'\" + removeContent + \"' 을 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    this.setState({\n      todos: todos.filter((todo) => todo.id !== id),\n    });\n\n    const data = {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"delete\",\n    };\n    fetch(\"/api/todos/\" + id, data)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.status);\n        } else {\n          return this.handleInitInfo();\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <TodoListTemplate\n        form={\n          <Form\n            // *** Form.js 에서 Hook(useState) 사용으로 인해 제거\n            // value={this.state.input}\n            // onChange={this.handleChange}\n            // onCreate={this.handleCreate}\n            // onKeyPress={this.handleKeyPress}\n            onCreate={this.handleCreate}\n          />\n        }\n      >\n        <TodoItemList\n          todos={this.state.todos}\n          onToggle={this.handleToggle}\n          onRemove={this.handleRemove}\n        />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}